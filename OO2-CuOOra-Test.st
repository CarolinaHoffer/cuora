TestCase subclass: #PreguntaTest	instanceVariableNames: 'unaPregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-CuOOra-Test'!!PreguntaTest methodsFor: 'running' stamp: 'DoloresGarcia 4/4/2020 22:35'!setUp	|topicos|	topicos := OrderedCollection new.	topicos add: (Topico nombre: 'Smalltalk' descripcion: 'Un topico sobre el lenguaje de programacion Smalltalk').	unaPregunta := Pregunta titulo: 'Como funciona un set?' texto: 'Como funciona un set en smalltalk' autor: (Usuario nombre: 'Pepe' contraseña:123) topicos: topicos.		 ! !!PreguntaTest methodsFor: 'tests' stamp: 'DoloresGarcia 3/31/2020 13:14'!testAgregarRespuesta  |respuesta1|  respuesta1 := Respuesta texto: 'Es una coleccion sin repeticiones' autor: (Usuario nombre: 'Pepe' contraseña: 123).   self assert: unaPregunta respuestas size equals: 0.  unaPregunta agregarRespuesta: respuesta1.  self assert: unaPregunta respuestas size equals: 1.  self deny: unaPregunta respuestas size equals: 0.! !!PreguntaTest methodsFor: 'tests' stamp: 'DoloresGarcia 4/4/2020 22:31'!testEliminarRespuestas  |unaRespuesta otraRespuesta|  unaRespuesta := Respuesta texto: 'Instanciar OrderedCollection' autor: (Usuario nombre: 'Pepe' contraseña: 123 ).  otraRespuesta := Respuesta texto: 'Hacer OrderedCollection new' autor: (Usuario nombre: 'Maria' contraseña: 456 ).  unaPregunta agregarRespuesta: unaRespuesta ; agregarRespuesta: otraRespuesta.  self assert: unaPregunta respuestas size equals: 2.  unaPregunta eliminarRespuestas.  self assert: unaPregunta respuestas size equals: 0.  self deny: unaPregunta respuestas size equals: 2.  ! !!PreguntaTest methodsFor: 'tests' stamp: 'DoloresGarcia 3/31/2020 13:10'!testDevolverPuntaje  self assert: unaPregunta devolverPuntaje equals: 20.! !!PreguntaTest methodsFor: 'tests' stamp: 'DoloresGarcia 3/31/2020 13:10'!testRespuestas  self assert: unaPregunta respuestas size equals: 0.  self deny: unaPregunta respuestas equals: nil.! !!PreguntaTest methodsFor: 'tests' stamp: 'DoloresGarcia 4/4/2020 23:03'!testTieneTopico  |otraPregunta otrosTopicos unTopico|  otrosTopicos := OrderedCollection new.  unTopico := Topico nombre: 'Programacion' descripcion: 'Un topico para hablar sobre programacion'.  otrosTopicos add: unTopico.     otraPregunta := Pregunta titulo:'Que es la programacion funcional?' texto:'Informacion sobre el paradigma' autor: (Usuario nombre: 'Maria'contraseña:456 )                   topicos: otrosTopicos.  self assert: (otraPregunta tieneTopico: unTopico) equals: true.  self deny: (unaPregunta tieneTopico: unTopico) equals: true.! !!PreguntaTest methodsFor: 'tests' stamp: 'HC 4/5/2020 00:59'!testPrueba	|pepe|	pepe:=Usuario nombre: 'pepe' contraseña:'23'.	self assert: (Pregunta titulo: 'hola' 													texto:'buenos dias'  													autor: pepe  													topicos: (OrderedCollection new)) autor equals: pepe.! !TestCase subclass: #RespuestaTest	instanceVariableNames: 'unaRespuesta'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-CuOOra-Test'!!RespuestaTest methodsFor: 'running' stamp: 'DoloresGarcia 3/31/2020 13:29'!setUp  unaRespuesta := Respuesta texto: 'Hacer OrderderCollection new' autor: (Usuario nombre: 'Pepe' contraseña:123).! !!RespuestaTest methodsFor: 'tests' stamp: 'DoloresGarcia 4/4/2020 23:09'!testDevolverPuntaje   |unUsuario otraRespuesta|   self assert: unaRespuesta devolverPuntaje equals: 50.  unUsuario := Usuario nombre: 'Maria' contraseña: 456.  otraRespuesta := Respuesta texto: 'Instanciar OrderedCollection' autor: unUsuario.  unaRespuesta comprobarAutor: unUsuario.  self assert: unaRespuesta devolverPuntaje equals: 50.  otraRespuesta comprobarAutor: unUsuario.  self assert: otraRespuesta devolverPuntaje equals: 0.      ! !!RespuestaTest methodsFor: 'tests' stamp: 'DoloresGarcia 3/31/2020 19:49'!testComprobarAutor  |usuario1 respuesta1|  usuario1 := Usuario nombre: 'Maria' contraseña: 456.  unaRespuesta comprobarAutor: usuario1.  self assert: unaRespuesta devolverPuntaje equals: 50.  respuesta1 := Respuesta texto: 'Instanciar OrderedCollection' autor: usuario1.  self assert: respuesta1 devolverPuntaje equals: 50.  respuesta1 comprobarAutor: usuario1.  self assert: respuesta1 devolverPuntaje equals: 0.  self deny: respuesta1 devolverPuntaje equals: 50.! !!RespuestaTest methodsFor: 'tests' stamp: 'DoloresGarcia 4/4/2020 21:25'!testCantidadVotos  |usuario1|  usuario1:= Usuario nombre: 'Pepe' contraseña: 123.  self assert: (unaRespuesta cantidadVotos: true) equals: 0.  self assert: (unaRespuesta cantidadVotos: false) equals: 0.  unaRespuesta registrarVoto: (Voto valor: true votante: usuario1).  self assert: (unaRespuesta cantidadVotos: true) equals: 1.  unaRespuesta registrarVoto: (Voto valor: true votante: usuario1).  self assert: (unaRespuesta cantidadVotos: true) equals: 1.  unaRespuesta registrarVoto: (Voto valor: false votante: usuario1).  self assert: (unaRespuesta cantidadVotos: true) equals: 0.  self assert: (unaRespuesta cantidadVotos: false) equals: 1.    ! !!RespuestaTest methodsFor: 'tests' stamp: 'DoloresGarcia 4/4/2020 22:26'!testValoracion  |usuario1 usuario2|  usuario1:= Usuario nombre: 'Pepe' contraseña: 123.  usuario2:= Usuario nombre: 'Maria' contraseña: 456.  self assert: unaRespuesta valoracion equals: 0.  unaRespuesta registrarVoto: (Voto valor: true votante: usuario1).  self assert: unaRespuesta valoracion equals: 1.  unaRespuesta registrarVoto: (Voto valor: false votante: usuario2).  self assert: unaRespuesta valoracion equals: 0.  self deny: unaRespuesta valoracion equals: 1.! !!RespuestaTest methodsFor: 'tests' stamp: 'DoloresGarcia 3/31/2020 19:41'!testActualizarPuntaje  self assert: unaRespuesta devolverPuntaje equals: 50.  unaRespuesta actualizarPuntaje.  self assert: unaRespuesta devolverPuntaje equals: 0.  self deny: unaRespuesta devolverPuntaje equals: 50.! !TestCase subclass: #SistemaTest	instanceVariableNames: 'topico1 topico2 usuario1 usuario2 sistema ctopicos1 ctopicos2 pregunta1 pregunta2'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-CuOOra-Test'!!SistemaTest methodsFor: 'tests' stamp: 'HC 4/5/2020 01:41'!testPreguntasDeUnTopico 	|pregunta|	pregunta:= Pregunta titulo: 'Que hace el anysatisfy' texto: 'que hace'  autor: 'usuario3'  topicos: OrderedCollection new. 	self assert: (pregunta1 tieneTopico: topico1) equals: true.	usuario1 agregarPregunta: pregunta1.	self assert: ((sistema preguntasDeUnTopico:topico1)includes: pregunta1) equals: true.	self assert: ((sistema preguntasDeUnTopico:topico1)includes: pregunta) equals: false.! !!SistemaTest methodsFor: 'tests' stamp: 'HC 4/5/2020 01:37'!testAgregarTopico  | cuora |  cuora:=Sistema new.	self assert: cuora topicos isEmpty equals: true.	cuora agregarTopico: topico1.	self assert: cuora topicos isEmpty equals: false.	cuora agregarTopico: topico2.	self assert: cuora topicos size equals: 2! !!SistemaTest methodsFor: 'tests' stamp: 'HC 4/5/2020 01:38'!testAgregarUsuario  | cuora |  cuora:= Sistema new.	self assert: cuora usuarios isEmpty equals: true.	cuora agregarUsuario: usuario1.	self assert: cuora usuarios isEmpty equals: false.	cuora agregarUsuario: usuario2.	self assert: cuora usuarios size equals: 2! !!SistemaTest methodsFor: 'running' stamp: 'HC 4/5/2020 00:28'!setUp		topico1 := Topico		nombre: 'Python'		descripcion: 'sector de preguntas referidas a Python y sus tecnologias'.	topico2 := Topico		nombre: 'POO'		descripcion: 'Sector de preguntas relacionadas a Programacion Orientada a Objetos y sus tecnologias'.	usuario1 := Usuario 		nombre: 'Martin Gomez' 		contraseña: 'Martin2020'.	usuario2 := Usuario		nombre: 'Josefina Torres'		contraseña: 'Josefina2020'.		ctopicos1:=OrderedCollection new.	ctopicos1 add: topico1.		pregunta1 := Pregunta		titulo: 'Como funciona un set?'		texto: 'Como funciona un set en smalltalk'		autor: usuario1		topicos: ctopicos1.	pregunta2 := Pregunta		titulo: 'Como funcionan las listas de Python?'		texto: 'Como funcionan las de Python para guardar variables'		autor: usuario2		topicos:ctopicos1.		sistema:= Sistema new.		sistema agregarTopico: topico1.		sistema agregarTopico: topico2.		sistema agregarUsuario: usuario1.		sistema agregarUsuario: usuario2.	! !TestCase subclass: #UsuarioTest	instanceVariableNames: 'usuario1 usuario2 pregunta1 respuesta1 respuesta2 topico1 topico2 usuario3 pregunta2 ctopicos1 ctopicos2 cuora'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-CuOOra-Test'!!UsuarioTest methodsFor: 'running' stamp: 'HC 4/5/2020 01:33'!setUp	usuario1 := Usuario 		nombre: 'Martin Gomez' 		contraseña: 'Martin2020'.	usuario2 := Usuario		nombre: 'Josefina Torres'		contraseña: 'Josefina2020'.	usuario3 := Usuario		nombre: 'Juan Perez'		contraseña: 'Juan2020'.		respuesta1 := Respuesta		texto: '¿Tiene los mismos metodos que una coleccion?'		autor: usuario1.	respuesta2 := Respuesta		texto: 'Es una coleccion sin repeticiones'		autor: usuario2.	topico1 := Topico		nombre: 'POO'		descripcion: 'Sector de preguntas relacionadas a Programacion Orientada a Objetos y sus tecnologias'.	topico2 := Topico	  nombre: 'Python'		descripcion: 'sector de preguntas referidas a Python y sus tecnologias'.	ctopicos1:=OrderedCollection new.	ctopicos1 add: topico1.	ctopicos2:=OrderedCollection new.	ctopicos2 add: topico2.			pregunta1 := Pregunta		titulo: 'Como funciona un set?'		texto: 'Como funciona un set en smalltalk'		autor: usuario1		topicos: ctopicos1.	pregunta2 := Pregunta		titulo: 'Como funcionan las listas de Python?'		texto: 'Como funcionan las de Python para guardar variables'		autor: usuario2		topicos:ctopicos1.			cuora:=Sistema new.	cuora agregarUsuario: usuario1.	cuora agregarUsuario: usuario2.	cuora agregarUsuario: usuario3.	cuora agregarTopico: topico1.	cuora agregarTopico: topico2.! !!UsuarioTest methodsFor: 'add/remove' stamp: 'HC 3/31/2020 20:22'!testAgregarRespuesta	self assert: usuario1 respuestasRealizadas isEmpty equals: true.	usuario1 agregarRespuesta: respuesta1.	self assert: (usuario1 respuestasRealizadas) size equals: 1.! !!UsuarioTest methodsFor: 'add/remove' stamp: 'HC 3/31/2020 19:48'!testAgregarTopicoDeInteres	self assert: usuario1 topicosDeInteres isEmpty equals: true.	usuario1 agregarTopicoDeInteres: topico1.	self assert: (usuario1 topicosDeInteres) isEmpty equals: false.	usuario1 agregarTopicoDeInteres: topico2.	self assert: (usuario1 topicosDeInteres) size equals: 2! !!UsuarioTest methodsFor: 'add/remove' stamp: 'HC 3/31/2020 20:21'!testBorrarRespuesta	usuario1 agregarRespuesta: respuesta1.	self assert: usuario1 respuestasRealizadas size equals: 1.	usuario1 borrarRespuesta:  respuesta1.	self assert: usuario1 respuestasRealizadas size equals: 0.! !!UsuarioTest methodsFor: 'add/remove' stamp: 'HC 3/29/2020 20:57'!testSeguir	usuario1 seguir: usuario2.	self assert: (usuario1 seguidos at: 1) equals: usuario2. ! !!UsuarioTest methodsFor: 'add/remove' stamp: 'HC 3/31/2020 19:50'!testAgregarPregunta	self assert: usuario1 preguntasRealizadas isEmpty equals: true.	usuario1 agregarPregunta: pregunta1.	self assert: (usuario1 preguntasRealizadas) size equals: 1! !!UsuarioTest methodsFor: 'add/remove' stamp: 'HC 3/31/2020 19:55'!testBorrarPregunta	usuario1 agregarPregunta: pregunta1.	self assert: usuario1 preguntasRealizadas size equals: 1.	usuario1 borrarPregunta: pregunta1.	self assert: usuario1 preguntasRealizadas isEmpty equals: true.! !!UsuarioTest methodsFor: 'preguntas' stamp: 'HC 4/5/2020 01:34'!testPreguntasDeTopicosInteres	usuario3 agregarTopicoDeInteres: topico1.	usuario3 agregarTopicoDeInteres: topico2.	usuario1 agregarPregunta: pregunta1.	usuario2 agregarPregunta: pregunta2.	self assert: ((usuario3 preguntasDeTopicosInteres:cuora ) includes: pregunta1) equals: true.  	self assert: ((usuario3 preguntasDeTopicosInteres:cuora ) includes: pregunta2) equals: true.  		"Segun el setUP topico1 esta relacionado con pregunta1 y pregunta2"! !!UsuarioTest methodsFor: 'preguntas' stamp: 'HC 4/5/2020 00:40'!testPreguntasRelevantes  usuario1 agregarPregunta: pregunta1.	usuario2 agregarPregunta: pregunta2.		usuario3 agregarTopicoDeInteres: topico1.	usuario3 seguir: usuario2.	self assert: ((usuario3 preguntasRelevantes:cuora) includes: pregunta1) equals: true.	self assert: ((usuario3 preguntasRelevantes:cuora) includes: pregunta2) equals: true.! !!UsuarioTest methodsFor: 'preguntas' stamp: 'HC 3/31/2020 20:23'!testPreguntasDeSeguidos	usuario1 agregarPregunta: pregunta1.	usuario2 agregarPregunta: pregunta2.	usuario3 seguir: usuario1.	usuario3 seguir: usuario2.	self assert: (usuario3 preguntasDeSeguidos includes: pregunta1 ) equals: true.	self assert: (usuario3 preguntasDeSeguidos includes: pregunta2) equals: true.	! !!UsuarioTest methodsFor: 'accesing' stamp: 'HC 3/31/2020 20:09'!testPreguntasRealizadas	usuario1 agregarPregunta: pregunta1.	self assert: ((usuario1 preguntasRealizadas) includes: pregunta1) equals: true.! !!UsuarioTest methodsFor: 'accesing' stamp: 'HC 3/31/2020 20:10'!testRespuestasRealizadas	usuario1 agregarRespuesta: respuesta1.	self assert: ((usuario1 respuestasRealizadas) includes: respuesta1) equals: true.! !!UsuarioTest methodsFor: 'tests' stamp: 'HC 4/5/2020 00:22'!testPreguntasDeUnTopico	self assert:(pregunta1 tieneTopico: topico1) equals: true.	usuario1 agregarPregunta: pregunta1.	self assert:((usuario1 preguntasDeUnTopico: topico1) includes: pregunta1) equals:true.! !!UsuarioTest methodsFor: 'tests' stamp: 'HC 4/5/2020 01:10'!testPuntajeDeUsuario	self assert: usuario1 puntajeDeUsuario equals:0.	self assert: usuario2 puntajeDeUsuario equals:0.	usuario1 agregarPregunta: pregunta1.	self assert: usuario1 puntajeDeUsuario equals: 20.	usuario2 agregarRespuesta: respuesta2.	pregunta1 agregarRespuesta: respuesta2.	self assert: usuario2 puntajeDeUsuario equals: 50.	usuario1 agregarRespuesta: respuesta1.		pregunta1 agregarRespuesta: respuesta1.	self assert: usuario1 puntajeDeUsuario equals: 20.		! !TestCase subclass: #VotoTest	instanceVariableNames: 'unVoto'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-CuOOra-Test'!!VotoTest methodsFor: 'running' stamp: 'DoloresGarcia 3/30/2020 22:52'!setUp  unVoto := Voto valor: true votante: (Usuario nombre: 'Pepe' contraseña: 123). ! !!VotoTest methodsFor: 'tests' stamp: 'DoloresGarcia 3/30/2020 22:56'!testValor  self assert: unVoto valor equals: true.  unVoto valor: false.  self deny: unVoto valor equals: true.  self assert: unVoto valor equals: false.! !!VotoTest methodsFor: 'tests' stamp: 'DoloresGarcia 3/30/2020 23:06'!testVotante  self assert: unVoto votante nombre equals: 'Pepe'.  self assert: unVoto votante contraseña equals: 123.  self deny: unVoto votante equals: nil. ! !